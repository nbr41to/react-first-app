{"version":3,"sources":["Form.jsx","Item.jsx","List.jsx","TodoApp.jsx","App.jsx","index.js"],"names":["Form","addTodo","useState","value","setValue","onSubmit","e","preventDefault","alert","TextField","id","label","onChange","target","useStyles","makeStyles","theme","li","margin","backgroundColor","borderRadius","boxShadow","breakpoints","down","color","Item","content","deleteTodo","classes","React","checked","setChecked","className","Checkbox","event","style","textDecoration","IconButton","aria-label","onClick","fontSize","ul","listStyle","padding","List","todos","handleChange","map","todo","index","key","TodoApp","props","setTodos","Fragment","Box","width","display","bgcolor","border","justifyContent","flexDirection","p","textAlign","m","num","mt","shortid","generate","filter","App","Grid","container","spacing","direction","justify","alignItems","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.382a0c03.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst Form = ({ addTodo }) => {\n  // ここでStateを管理するのはよろしくない？\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    // これがないと面白いことが起こる\n    e.preventDefault();\n    // 空で追加しないように\n    if (value !== \"\") {\n      addTodo(value);\n      setValue(\"\");\n    } else {\n      // 空のときはアラート\n      alert(\"やることを入力してください！\");\n    }\n    // 過去はこんな原始的な方法でinputを空にしてました\n    // TextFieldの中のinputタグをしっかりと選択しよう！\n    // for (let i = 0; i < 12; i++) {\n    //   let input = document.getElementsByTagName(\"input\")[i];\n    //   input.value = \"\";\n    // }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        // className=\"input\"\n        id=\"standard-basic\"\n        label=\"なにするの？\"\n        // これ重要\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        // setStateと結びつける\n        value={value}\n      />\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { IconButton } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  // セレクタとCSSでかける\n  li: {\n    margin: \"7px 3px\",\n    backgroundColor: \"#eee\",\n    borderRadius: \"5px\",\n    boxShadow: \"2px 2px 3px 1px #555\",\n    // themeを引数にしないとメディアクエリーは使えない\n    [theme.breakpoints.down(\"xs\")]: {\n      color: \"#444\",\n      backgroundColor: \"pink\",\n    },\n  },\n}));\n\nconst Item = ({ content, id, deleteTodo }) => {\n  // makeStylesを使ってみる\n  const classes = useStyles();\n  // TodoAppに行ってきます\n  const [checked, setChecked] = React.useState(false);\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n  };\n\n  // 開発中\n  // const handleCheck = () => {\n  //   handleChange(id);\n  // };\n  const handleDelete = () => {\n    // e.preventDefault();\n    deleteTodo(id);\n  };\n  return (\n    <li className={classes.li}>\n      <Checkbox checked={checked} onChange={handleChange} color=\"primary\" />\n      <span\n        style={{\n          textDecoration: checked ? \"line-through\" : \"none\",\n          color: checked ? \"gray\" : \"\",\n        }}\n      >\n        {content}\n      </span>\n      <IconButton aria-label=\"delete\" onClick={handleDelete}>\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </li>\n  );\n};\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  // セレクタとCSSでかける\n  ul: {\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\nconst List = ({ todos, deleteTodo, handleChange }) => {\n  // makeStylesを使う\n  const classes = useStyles();\n  return (\n    <ul className={classes.ul}>\n      {/*  mapを使うときはコンポーネントに識別ができるようにkeyを設定してあげましょう. */}\n      {todos.map((todo, index) => {\n        return (\n          <Item\n            content={todo.content}\n            key={index}\n            id={todo.id}\n            deleteTodo={deleteTodo}\n            // まだ渡してないよ\n            // checked={todo.checked}\n            // handleChange={handleChange}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport Form from \"./Form.jsx\";\nimport List from \"./List.jsx\";\nimport shortid from \"shortid\";\nimport { Box } from \"@material-ui/core\";\n\n// 外部系\n// import Typography from \"@material-ui/core/Typography\";\n\nconst TodoApp = (props) => {\n  const [todos, setTodos] = useState([\n    { id: \"a01\", content: \"やります\", checked: false },\n    { id: \"b02\", content: \"やりました\", checked: true },\n  ]);\n  // const [checked, setChecked] = React.useState(false);\n  // タスクを追加する関数\n  const addTodo = (content) => {\n    setTodos([\n      ...todos,\n      {\n        // content: content,\n        // keyと中身が一緒の場合は省略可能\n        content,\n        // ユニークなIDを生成するshortidのメソッドを使用\n        id: shortid.generate(),\n      },\n    ]);\n  };\n\n  // タスクを完了にする関数（開発中）\n  const handleChange = (id) => {\n    // setTodos(event.target.checked);\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          todo.id = todo.id;\n          todo.content = todo.content;\n          todo.checked = !todo.checked;\n        }\n      })\n    );\n  };\n\n  // タスクを削除する関数\n  const deleteTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n  // #ここではBoxの練習をしてみる\n  // divで囲まれるようだ\n  // 補完が素晴らしいが,\"\"の中は当然補完されない\n  // 技術がなくて複雑なCSSがかけない\n  // 見づらい...\n  return (\n    <React.Fragment>\n      <Box\n        width=\"300px\"\n        display=\"flex\"\n        bgcolor={props.bgcolor}\n        border=\"1px solid black\"\n        borderRadius=\"20px\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        p={2}\n      >\n        <Box\n          // width=\"auto\"\n          fontSize=\"12px\"\n          color=\"info.contrastText\"\n          bgcolor=\"info.main\"\n          // 変数を使ってみた↑2つ\n          borderRadius=\"10px\"\n          textAlign=\"center\"\n          // marginとpaddingのショートカット\n          m={0}\n          p={1}\n        >\n          <h1>はじめてのTodoApp{props.num}</h1>\n        </Box>\n        <Box p={3} mt={2} bgcolor=\"white\" borderRadius=\"10px\">\n          <Form addTodo={addTodo} />\n          <List\n            todos={todos}\n            deleteTodo={deleteTodo}\n            handleChange={handleChange}\n          />\n        </Box>\n      </Box>\n    </React.Fragment>\n  );\n};\n\nexport default TodoApp;\n","import React from \"react\";\nimport TodoApp from \"./TodoApp.jsx\";\nimport { Grid } from \"@material-ui/core\";\n\n// 外部系\n// import Typography from \"@material-ui/core/Typography\";\n\nconst App = () => {\n  const colors = [\"skyblue\", \"lightgreen\", \"tomato\", \"orange\"];\n  // そのうち追加ボタンでリストをランダムのカラーで追加とかしたいね\n  // ここではGridの練習をしてみる\n  // Gridよき ようはFlexboxだね\n  // itemをmapで並べてみた\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        spacing={3}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"start\"\n      >\n        {/* <Grid item>\n          <TodoApp bgcolor=\"skyblue\" />\n        </Grid>\n        <Grid item>\n          <TodoApp bgcolor=\"lightgreen\" />\n        </Grid>\n        <Grid item>\n          <TodoApp bgcolor=\"tomato\" />\n        </Grid> */}\n        {colors.map((color, index) => {\n          return (\n            <Grid item>\n              <TodoApp bgcolor={color} num={1 + index} />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// メモ\n// ReactAppは最後はAppに一つにまとめてrenderしましょうよという慣習がある\n// 拡張子は,Componentの拡張子は.jsxとしたほうが,VSCodeのJSX内の補完が適応される\n// index.jsだけは区別しやすいので.jsのままにしてみた（※この拡張子変えると,yarn startをし直さないといけない）"],"sourceRoot":""}